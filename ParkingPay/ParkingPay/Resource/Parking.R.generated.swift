//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
public struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  public static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  public struct storyboard {
    /// Storyboard `LaunchScreen`.
    public static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `ParkingMain`.
    public static let parkingMain = _R.storyboard.parkingMain()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    public static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ParkingMain", bundle: ...)`
    public static func parkingMain(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.parkingMain)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  public struct color {
    /// Color `ParkingBtnNoColor`.
    public static let parkingBtnNoColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ParkingBtnNoColor")
    /// Color `ParkingBtnYesColor`.
    public static let parkingBtnYesColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ParkingBtnYesColor")
    /// Color `ParkingMainBgColor`.
    public static let parkingMainBgColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ParkingMainBgColor")
    /// Color `ParkingThemeColor`.
    public static let parkingThemeColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "ParkingThemeColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ParkingBtnNoColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func parkingBtnNoColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkingBtnNoColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ParkingBtnYesColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func parkingBtnYesColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkingBtnYesColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ParkingMainBgColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func parkingMainBgColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkingMainBgColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "ParkingThemeColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    public static func parkingThemeColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkingThemeColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 15 images.
  public struct image {
    /// Image `ParkingBgRfidCard`.
    public static let parkingBgRfidCard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingBgRfidCard")
    /// Image `ParkingIconDelete`.
    public static let parkingIconDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconDelete")
    /// Image `ParkingIconEdit`.
    public static let parkingIconEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconEdit")
    /// Image `ParkingIconLeftArrow`.
    public static let parkingIconLeftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconLeftArrow")
    /// Image `ParkingIconLogoCircle`.
    public static let parkingIconLogoCircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconLogoCircle")
    /// Image `ParkingIconLogoW`.
    public static let parkingIconLogoW = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconLogoW")
    /// Image `ParkingIconLogo`.
    public static let parkingIconLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconLogo")
    /// Image `ParkingIconPaidSuccess`.
    public static let parkingIconPaidSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconPaidSuccess")
    /// Image `ParkingIconPay`.
    public static let parkingIconPay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconPay")
    /// Image `ParkingIconRightArrow`.
    public static let parkingIconRightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingIconRightArrow")
    /// Image `ParkingTabBarContact`.
    public static let parkingTabBarContact = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingTabBarContact")
    /// Image `ParkingTabBarHistory`.
    public static let parkingTabBarHistory = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingTabBarHistory")
    /// Image `ParkingTabBarHome`.
    public static let parkingTabBarHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingTabBarHome")
    /// Image `ParkingTabBarPark`.
    public static let parkingTabBarPark = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingTabBarPark")
    /// Image `ParkingTabBarRfid`.
    public static let parkingTabBarRfid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ParkingTabBarRfid")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingBgRfidCard", bundle: ..., traitCollection: ...)`
    public static func parkingBgRfidCard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingBgRfidCard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconDelete", bundle: ..., traitCollection: ...)`
    public static func parkingIconDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconDelete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconEdit", bundle: ..., traitCollection: ...)`
    public static func parkingIconEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconEdit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconLeftArrow", bundle: ..., traitCollection: ...)`
    public static func parkingIconLeftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconLeftArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconLogo", bundle: ..., traitCollection: ...)`
    public static func parkingIconLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconLogoCircle", bundle: ..., traitCollection: ...)`
    public static func parkingIconLogoCircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconLogoCircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconLogoW", bundle: ..., traitCollection: ...)`
    public static func parkingIconLogoW(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconLogoW, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconPaidSuccess", bundle: ..., traitCollection: ...)`
    public static func parkingIconPaidSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconPaidSuccess, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconPay", bundle: ..., traitCollection: ...)`
    public static func parkingIconPay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconPay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingIconRightArrow", bundle: ..., traitCollection: ...)`
    public static func parkingIconRightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingIconRightArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingTabBarContact", bundle: ..., traitCollection: ...)`
    public static func parkingTabBarContact(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingTabBarContact, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingTabBarHistory", bundle: ..., traitCollection: ...)`
    public static func parkingTabBarHistory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingTabBarHistory, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingTabBarHome", bundle: ..., traitCollection: ...)`
    public static func parkingTabBarHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingTabBarHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingTabBarPark", bundle: ..., traitCollection: ...)`
    public static func parkingTabBarPark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingTabBarPark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ParkingTabBarRfid", bundle: ..., traitCollection: ...)`
    public static func parkingTabBarRfid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.parkingTabBarRfid, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 6 nibs.
  public struct nib {
    /// Nib `ParkingMerchantTableViewCell`.
    public static let parkingMerchantTableViewCell = _R.nib._ParkingMerchantTableViewCell()
    /// Nib `ParkingOrderTableViewCell`.
    public static let parkingOrderTableViewCell = _R.nib._ParkingOrderTableViewCell()
    /// Nib `ParkingOrderTableViewHeaderView`.
    public static let parkingOrderTableViewHeaderView = _R.nib._ParkingOrderTableViewHeaderView()
    /// Nib `ParkingParkEmptyTableViewCell`.
    public static let parkingParkEmptyTableViewCell = _R.nib._ParkingParkEmptyTableViewCell()
    /// Nib `ParkingParkTableViewCell`.
    public static let parkingParkTableViewCell = _R.nib._ParkingParkTableViewCell()
    /// Nib `ParkingParkTableViewHeaderView`.
    public static let parkingParkTableViewHeaderView = _R.nib._ParkingParkTableViewHeaderView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingMerchantTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingMerchantTableViewCell) instead")
    public static func parkingMerchantTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingMerchantTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingOrderTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingOrderTableViewCell) instead")
    public static func parkingOrderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingOrderTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingOrderTableViewHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingOrderTableViewHeaderView) instead")
    public static func parkingOrderTableViewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingOrderTableViewHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingParkEmptyTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingParkEmptyTableViewCell) instead")
    public static func parkingParkEmptyTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingParkEmptyTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingParkTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingParkTableViewCell) instead")
    public static func parkingParkTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingParkTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ParkingParkTableViewHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.parkingParkTableViewHeaderView) instead")
    public static func parkingParkTableViewHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.parkingParkTableViewHeaderView)
    }
    #endif

    public static func parkingMerchantTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingMerchantTableViewCell? {
      return R.nib.parkingMerchantTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingMerchantTableViewCell
    }

    public static func parkingOrderTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingOrderTableViewCell? {
      return R.nib.parkingOrderTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingOrderTableViewCell
    }

    public static func parkingOrderTableViewHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingOrderTableViewHeaderView? {
      return R.nib.parkingOrderTableViewHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingOrderTableViewHeaderView
    }

    public static func parkingParkEmptyTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkEmptyTableViewCell? {
      return R.nib.parkingParkEmptyTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkEmptyTableViewCell
    }

    public static func parkingParkTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkTableViewCell? {
      return R.nib.parkingParkTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkTableViewCell
    }

    public static func parkingParkTableViewHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkTableViewHeaderView? {
      return R.nib.parkingParkTableViewHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkTableViewHeaderView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  public struct string {
    /// This `R.string.parkingLocalizable` struct is generated, and contains static references to 15 localization keys.
    public struct parkingLocalizable {
      /// Value: Add vehicle license plate number(e.g. XYZ1234)
      public static let editPlatePrompt = Rswift.StringResource(key: "edit plate prompt", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All Merchants
      public static let allMerchants = Rswift.StringResource(key: "all merchants", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure to delete the license plate
      public static let deletePlateConfirm = Rswift.StringResource(key: "delete plate confirm", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: COUNCILS
      public static let councils = Rswift.StringResource(key: "councils", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      public static let cancel = Rswift.StringResource(key: "cancel", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Commercial
      public static let commercial = Rswift.StringResource(key: "commercial", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Loading...
      public static let loading = Rswift.StringResource(key: "loading", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NEAR ME
      public static let nearMe = Rswift.StringResource(key: "near me", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Data
      public static let noData = Rswift.StringResource(key: "no data", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter the system [settings] - > [privacy] - > [location service] to turn on the switch，And allow this program to use location services
      public static let locationHelpMessage = Rswift.StringResource(key: "location help message", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reload
      public static let retryLoadData = Rswift.StringResource(key: "retry load data", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Residential
      public static let residential = Rswift.StringResource(key: "residential", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      public static let save = Rswift.StringResource(key: "save", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Shopping Mall
      public static let shoppingMall = Rswift.StringResource(key: "shopping mall", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: The location service is not enabled. Do you want to start it?
      public static let locationRequestTitle = Rswift.StringResource(key: "location request title", tableName: "ParkingLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Add vehicle license plate number(e.g. XYZ1234)
      public static func editPlatePrompt(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit plate prompt", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "edit plate prompt"
        }

        return NSLocalizedString("edit plate prompt", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: All Merchants
      public static func allMerchants(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("all merchants", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "all merchants"
        }

        return NSLocalizedString("all merchants", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Are you sure to delete the license plate
      public static func deletePlateConfirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("delete plate confirm", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "delete plate confirm"
        }

        return NSLocalizedString("delete plate confirm", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: COUNCILS
      public static func councils(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("councils", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "councils"
        }

        return NSLocalizedString("councils", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      public static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Commercial
      public static func commercial(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("commercial", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "commercial"
        }

        return NSLocalizedString("commercial", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Loading...
      public static func loading(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("loading", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "loading"
        }

        return NSLocalizedString("loading", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: NEAR ME
      public static func nearMe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("near me", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "near me"
        }

        return NSLocalizedString("near me", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: No Data
      public static func noData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no data", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "no data"
        }

        return NSLocalizedString("no data", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Please enter the system [settings] - > [privacy] - > [location service] to turn on the switch，And allow this program to use location services
      public static func locationHelpMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location help message", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "location help message"
        }

        return NSLocalizedString("location help message", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Reload
      public static func retryLoadData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("retry load data", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "retry load data"
        }

        return NSLocalizedString("retry load data", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Residential
      public static func residential(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("residential", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "residential"
        }

        return NSLocalizedString("residential", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Save
      public static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: Shopping Mall
      public static func shoppingMall(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("shopping mall", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "shopping mall"
        }

        return NSLocalizedString("shopping mall", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      /// Value: The location service is not enabled. Do you want to start it?
      public static func locationRequestTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("location request title", tableName: "ParkingLocalizable", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "ParkingLocalizable", preferredLanguages: preferredLanguages) else {
          return "location request title"
        }

        return NSLocalizedString("location request title", tableName: "ParkingLocalizable", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

public struct _R: Rswift.Validatable {
  public static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  public struct nib {
    public struct _ParkingMerchantTableViewCell: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingMerchantTableViewCell"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingMerchantTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingMerchantTableViewCell
      }

      fileprivate init() {}
    }

    public struct _ParkingOrderTableViewCell: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingOrderTableViewCell"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingOrderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingOrderTableViewCell
      }

      fileprivate init() {}
    }

    public struct _ParkingOrderTableViewHeaderView: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingOrderTableViewHeaderView"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingOrderTableViewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingOrderTableViewHeaderView
      }

      fileprivate init() {}
    }

    public struct _ParkingParkEmptyTableViewCell: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingParkEmptyTableViewCell"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkEmptyTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkEmptyTableViewCell
      }

      fileprivate init() {}
    }

    public struct _ParkingParkTableViewCell: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingParkTableViewCell"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkTableViewCell
      }

      fileprivate init() {}
    }

    public struct _ParkingParkTableViewHeaderView: Rswift.NibResourceType {
      public let bundle = R.hostingBundle
      public let name = "ParkingParkTableViewHeaderView"

      public func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ParkingParkTableViewHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ParkingParkTableViewHeaderView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  public struct storyboard: Rswift.Validatable {
    public static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try parkingMain.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    public struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      public typealias InitialController = UIKit.UIViewController

      public let bundle = R.hostingBundle
      public let name = "LaunchScreen"

      public static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    public struct parkingMain: Rswift.StoryboardResourceType, Rswift.Validatable {
      public let bundle = R.hostingBundle
      public let name = "ParkingMain"
      public let parkingContactViewController = StoryboardViewControllerResource<ParkingContactViewController>(identifier: "ParkingContactViewController")
      public let parkingEditViewController = StoryboardViewControllerResource<ParkingEditViewController>(identifier: "ParkingEditViewController")
      public let parkingHomeViewController = StoryboardViewControllerResource<ParkingHomeViewController>(identifier: "ParkingHomeViewController")
      public let parkingInitViewController = StoryboardViewControllerResource<ParkingInitViewController>(identifier: "ParkingInitViewController")
      public let parkingMainViewController = StoryboardViewControllerResource<ParkingMainViewController>(identifier: "ParkingMainViewController")
      public let parkingMerchantsViewController = StoryboardViewControllerResource<ParkingMerchantsViewController>(identifier: "ParkingMerchantsViewController")
      public let parkingOrderInfoViewController = StoryboardViewControllerResource<ParkingOrderInfoViewController>(identifier: "ParkingOrderInfoViewController")
      public let parkingOrdersViewController = StoryboardViewControllerResource<ParkingOrdersViewController>(identifier: "ParkingOrdersViewController")
      public let parkingPaidViewController = StoryboardViewControllerResource<ParkingPaidViewController>(identifier: "ParkingPaidViewController")
      public let parkingParkViewController = StoryboardViewControllerResource<ParkingParkViewController>(identifier: "ParkingParkViewController")
      public let parkingParkingsViewController = StoryboardViewControllerResource<ParkingParkingsViewController>(identifier: "ParkingParkingsViewController")
      public let parkingPayConfirmViewController = StoryboardViewControllerResource<ParkingPayConfirmViewController>(identifier: "ParkingPayConfirmViewController")
      public let parkingRfidViewController = StoryboardViewControllerResource<ParkingRfidViewController>(identifier: "ParkingRfidViewController")

      public func parkingContactViewController(_: Void = ()) -> ParkingContactViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingContactViewController)
      }

      public func parkingEditViewController(_: Void = ()) -> ParkingEditViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingEditViewController)
      }

      public func parkingHomeViewController(_: Void = ()) -> ParkingHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingHomeViewController)
      }

      public func parkingInitViewController(_: Void = ()) -> ParkingInitViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingInitViewController)
      }

      public func parkingMainViewController(_: Void = ()) -> ParkingMainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingMainViewController)
      }

      public func parkingMerchantsViewController(_: Void = ()) -> ParkingMerchantsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingMerchantsViewController)
      }

      public func parkingOrderInfoViewController(_: Void = ()) -> ParkingOrderInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingOrderInfoViewController)
      }

      public func parkingOrdersViewController(_: Void = ()) -> ParkingOrdersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingOrdersViewController)
      }

      public func parkingPaidViewController(_: Void = ()) -> ParkingPaidViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingPaidViewController)
      }

      public func parkingParkViewController(_: Void = ()) -> ParkingParkViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingParkViewController)
      }

      public func parkingParkingsViewController(_: Void = ()) -> ParkingParkingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingParkingsViewController)
      }

      public func parkingPayConfirmViewController(_: Void = ()) -> ParkingPayConfirmViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingPayConfirmViewController)
      }

      public func parkingRfidViewController(_: Void = ()) -> ParkingRfidViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingRfidViewController)
      }

      public static func validate() throws {
        if UIKit.UIImage(named: "ParkingBgRfidCard", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingBgRfidCard' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconDelete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconDelete' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconEdit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconEdit' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconLeftArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconLeftArrow' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconLogo' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconLogoCircle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconLogoCircle' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconLogoW", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconLogoW' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconPay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconPay' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingIconRightArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingIconRightArrow' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingTabBarContact", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingTabBarContact' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingTabBarHistory", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingTabBarHistory' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingTabBarHome", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingTabBarHome' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingTabBarPark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingTabBarPark' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ParkingTabBarRfid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ParkingTabBarRfid' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "ParkingBtnNoColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ParkingBtnNoColor' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ParkingBtnYesColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ParkingBtnYesColor' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ParkingMainBgColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ParkingMainBgColor' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
          if UIKit.UIColor(named: "ParkingThemeColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'ParkingThemeColor' is used in storyboard 'ParkingMain', but couldn't be loaded.") }
        }
        if _R.storyboard.parkingMain().parkingContactViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingContactViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingContactViewController'.") }
        if _R.storyboard.parkingMain().parkingEditViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingEditViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingEditViewController'.") }
        if _R.storyboard.parkingMain().parkingHomeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingHomeViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingHomeViewController'.") }
        if _R.storyboard.parkingMain().parkingInitViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingInitViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingInitViewController'.") }
        if _R.storyboard.parkingMain().parkingMainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingMainViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingMainViewController'.") }
        if _R.storyboard.parkingMain().parkingMerchantsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingMerchantsViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingMerchantsViewController'.") }
        if _R.storyboard.parkingMain().parkingOrderInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingOrderInfoViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingOrderInfoViewController'.") }
        if _R.storyboard.parkingMain().parkingOrdersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingOrdersViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingOrdersViewController'.") }
        if _R.storyboard.parkingMain().parkingPaidViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingPaidViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingPaidViewController'.") }
        if _R.storyboard.parkingMain().parkingParkViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingParkViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingParkViewController'.") }
        if _R.storyboard.parkingMain().parkingParkingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingParkingsViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingParkingsViewController'.") }
        if _R.storyboard.parkingMain().parkingPayConfirmViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingPayConfirmViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingPayConfirmViewController'.") }
        if _R.storyboard.parkingMain().parkingRfidViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingRfidViewController' could not be loaded from storyboard 'ParkingMain' as 'ParkingRfidViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
